library(spatstat)
# A) define a function in place of the fixed intensity value of the standard Poisson process.
pp <- rpoispp(100)
# B) specify a function for the intensity
pp <- rpoispp(function(x,y) {100*x + 100*y})
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
# A) define a function in place of the fixed intensity value of the standard Poisson process.
pp <- rpoispp(100)
# B) specify a function for the intensity
pp <- rpoispp(function(x,y) {100*x + 100*y})
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
# with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
library(spatstat)
# A) define a function in place of the fixed intensity value of the standard Poisson process.
pp <- rpoispp(100)
# B) specify a function for the intensity
pp <- rpoispp(function(x,y) {100*x + 100*y})
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
# with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# A) define a function in place of the fixed intensity value of the standard Poisson process.
pp <- rpoispp(100)
# B) specify a function for the intensity
pp <- rpoispp(function(x,y) {100*x + 100*y})
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
# with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
#  E) with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
# A) define a function in place of the fixed intensity value of the standard Poisson process.
pp <- rpoispp(100)
# B) specify a function for the intensity
pp <- rpoispp(function(x,y) {100*x + 100*y})
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
par(mfrow=c(5, 2))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(5, 3))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(3, 3))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(2, 2))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(2, 1))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(3, 1))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
par(mfrow=c(1,3))  # Set up a 5x2 grid for 10 plots
for (i in 1:10) {
# Generate a realization of the point process with a different intensity function
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
# Plot the density of points in each realization
plot(density(pp))
# Visualize the density using contours
contour(density(pp), add=TRUE)
# Plot the point process on top
plot(pp, add=TRUE)
}
help(spatstat)
pp <- rSSI(0.05, 100)
pp <- rSSI(0.05, 100)
plot(pp, add=TRUE)
pp <- rSSI(0.05, 100)
plot(pp, add=T)
pp <- rSSI(0.05, 100)
plot(pp)
# Load the 'spatstat' library
library(spatstat)
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.05, 100)
plot(pp, main = paste("Realization", i))
}
#Q9 Change the inhibition distance to 0.08 and number of events to 50.
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.08, 50)
plot(pp, main = paste("Realization", i))
}
#Q9 Change the inhibition distance to 0.08 and number of events to 50.
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.08, 50)
plot(pp, main = paste("Realization", i))
}
#Q9 Change the inhibition distance to 0.08 and number of events to 50.
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.08, 50)
plot(pp, main = paste("Realization", i))
}
#contrast, a clustering process, such as the Thomas process
pp <- rThomas(10, 0.1, 10)
#contrast, a clustering process, such as the Thomas process
pp <- rThomas(10, 0.1, 10)
plot(pp, main = paste("Realization"))
#contrast, a clustering process, such as the Thomas process
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rThomas(10, 0.1, 10)
plot(pp, main = paste("Realization", i))
}
#Q8 Redoing the above statement 6 times and plot each realization
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.05, 100)
plot(pp, main = paste("Realization", i))
}
#  E) with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
#contrast, a clustering process, such as the Thomas process
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rThomas(10, 0.1, 10)
plot(pp, main = paste("Realization", i))
}
# A) To make a point pattern using one of these processes, type:
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(2, 3))
x11()
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# A) To make a point pattern using one of these processes, type:
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 3))
x11()
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# A) To make a point pattern using one of these processes, type:
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 3))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# A) To make a point pattern using one of these processes, type:
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(2, 3))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# Create a sample spatial point pattern (replace with your own data)
set.seed(123)
n_points <- 100
x <- runif(n_points)
y <- runif(n_points)
data_points <- ppp(x, y, window = owin(c(0, 1), c(0, 1)))
# A) To make a point pattern using one of these processes, type:
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 3))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# Create a sample spatial point pattern (replace with your own data)
set.seed(123)
n_points <- 100
x <- runif(n_points)
y <- runif(n_points)
data_points <- ppp(x, y, window = owin(c(0, 1), c(0, 1)))
# A) To make a point pattern using one of these processes, type:
par(mfrow = c(1, 3))
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 3))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# A) To make a point pattern using one of these processes, type:
par(mfrow = c(1, 2))
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 2))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# A) To make a point pattern using one of these processes, type:
par(mfrow = c(1, 2))
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 2))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# Create a sample spatial point pattern (replace with your own data)
set.seed(123)
n_points <- 100
x <- runif(n_points)
y <- runif(n_points)
data_points <- ppp(x, y, window = owin(c(0, 1), c(0, 1)))
#Q3 generate a point pattern with intensity 1 in a 10 x 10 square
pp.1.10 <- rpoispp(1, win=owin(c(0,10),c(0,10)))
par(mfrow=c(1,2))
plot(rpoispp(100),main = "intensity = 100, unitsquare")  # uniform Poisson process with
#intensity 100 in the unit square
plot (pp.1.10, main = "intensity = 1, 10 x 10 square")
# redoing exactly same process
pp2.1.10 <- rpoispp(1, win=owin(c(0,10),c(0,10)))
par(mfrow=c(1,2))
plot(rpoispp(100),main = "intensity = 100, unitsquare")  # uniform Poisson process with
#intensity 100 in the unit square
plot (pp2.1.10, main = "intensity = 1, 10 x 10 square")
#Q3 generate a point pattern with intensity 1 in a 10 x 10 square
pp.1.10 <- rpoispp(1, win=owin(c(0,10),c(0,10)))
par(mfrow=c(1,2))
plot(rpoispp(100),main = "intensity = 100, unitsquare")  # uniform Poisson process with
#intensity 100 in the unit square
plot (pp.1.10, main = "intensity = 1, 10 x 10 square")
# redoing exactly same process
pp2.1.10 <- rpoispp(1, win=owin(c(0,10),c(0,10)))
par(mfrow=c(1,2))
plot(rpoispp(100),main = "intensity = 100, unitsquare")  # uniform Poisson process with
#intensity 100 in the unit square
plot (pp2.1.10, main = "intensity = 1, 10 x 10 square")
#  E) with intensity lambda(x,y) = 100 * exp(-3*x)
# Intensity is bounded by 100
pp <- rpoispp(function(x,y) {100 * exp(-3*x)}, 100)
par(mfrow=c(1, 2))
# C) To plot the density of points in each realization:
plot(density(pp))
plot(pp, add=T)
# D) Visualizing the density of each point process realization is using contours
plot(density(pp))
contour(density(pp), add=T)
plot(pp, add=T)
#Q8 Redoing the above statement 6 times and plot each realization
# Set up a 2x3 grid for 6 plots
par(mfrow=c(2, 3))
# Generate and plot 6 realizations
for (i in 1:6) {
pp <- rSSI(0.05, 100)
plot(pp, main = paste("Realization", i))
}
# A) To make a point pattern using one of these processes, type:
par(mfrow = c(2, 3))
pp <-rpoispp(100)
#plot pp
plot(pp)
# B) combine generating and plotting a pattern into a single command
plot(rpoispp(100))
# C) create the pattern first before plotting
p1 <-rpoispp(100)
plot(p1)
# D) repeatedly generate p1 and plot it, until getting an interesting realization of the process.
par(mfrow = c(1, 2))
p2 <- rpoispp(100)
plot(p2)
p3 <- rpoispp(100)
plot(p3)
p4 <- rpoispp(100)
plot(p4)
p5 <- rpoispp(100)
plot(p5)
p6 <- rpoispp(100)
plot(p6)
# Create a sample spatial point pattern (replace with your own data)
set.seed(123)
n_points <- 100
x <- runif(n_points)
y <- runif(n_points)
data_points <- ppp(x, y, window = owin(c(0, 1), c(0, 1)))
